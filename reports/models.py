from django.db import models
from django.utils.translation import gettext_lazy as _
from django.contrib.contenttypes.fields import GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from django.conf import settings

class Report(models.Model):
    
    REPORT_TYPE_CHOICES = [
        ('sales', 'Sales Report'),
        ('inventory', 'Inventory Report'),
        ('purchase', 'Purchase Report'),
        ('customer', 'Customer Report'),
        ('supplier', 'Supplier Report'),
    ]
    
    PERIOD_CHOICES = [
        ('daily', 'Daily'),
        ('weekly', 'Weekly'),
        ('monthly', 'Monthly'),
        ('yearly', 'Yearly'),
        ('custom', 'Custom'),
    ]
    
    FORMAT_CHOICES = [
        ('pdf', 'PDF'),
        ('excel', 'Excel'),
        ('csv', 'CSV'),
    ]
    
    type = models.CharField(
        _('type'),
        max_length=20,
        choices=REPORT_TYPE_CHOICES
    )
    period = models.CharField(
        _('period'),
        max_length=20,
        choices=PERIOD_CHOICES
    )
    format = models.CharField(
        _('format'),
        max_length=10,
        choices=FORMAT_CHOICES
    )
    start_date = models.DateField(_('start date'))
    end_date = models.DateField(_('end date'))
    file = models.FileField(
        _('file'),
        upload_to='reports/',
        null=True,
        blank=True
    )
    generated_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        related_name='generated_reports',
        verbose_name=_('generated by')
    )
    created_at = models.DateTimeField(_('created at'), auto_now_add=True)
    
    class Meta:
        verbose_name = _('report')
        verbose_name_plural = _('reports')
        ordering = ['-created_at']
        
    def __str__(self):
        return f"{self.get_type_display()} ({self.start_date} to {self.end_date})"
        
    def get_report_data(self):
        from django.db.models import Sum, Count, Avg
        from products.models import Product
        from orders.models import SalesOrder, PurchaseOrder
        from customers.models import Customer
        from suppliers.models import Supplier
        
        data = {}
        
        if self.type == 'sales':
            orders = SalesOrder.objects.filter(
                created_at__date__range=[self.start_date, self.end_date]
            )
            data = {
                'total_orders': orders.count(),
                'total_amount': orders.aggregate(total=Sum('total_amount'))['total'] or 0,
                'average_order': orders.aggregate(avg=Avg('total_amount'))['avg'] or 0,
                'orders_by_status': orders.values('status').annotate(count=Count('id')),
            }
            
        elif self.type == 'inventory':
            products = Product.objects.all()
            data = {
                'total_products': products.count(),
                'total_stock': products.aggregate(total=Sum('stock'))['total'] or 0,
                'total_value': sum(p.stock * p.price for p in products),
                'low_stock': products.filter(stock__lte=models.F('reorder_level')).count(),
                'out_of_stock': products.filter(stock=0).count(),
            }
            
        elif self.type == 'purchase':
            orders = PurchaseOrder.objects.filter(
                created_at__date__range=[self.start_date, self.end_date]
            )
            data = {
                'total_orders': orders.count(),
                'total_amount': orders.aggregate(total=Sum('total_amount'))['total'] or 0,
                'average_order': orders.aggregate(avg=Avg('total_amount'))['avg'] or 0,
                'orders_by_status': orders.values('status').annotate(count=Count('id')),
            }
            
        elif self.type == 'customer':
            customers = Customer.objects.all()
            data = {
                'total_customers': customers.count(),
                'active_customers': customers.filter(is_active=True).count(),
                'total_orders': sum(c.get_total_orders() for c in customers),
                'total_spent': sum(c.get_total_spent() for c in customers),
            }
            
        elif self.type == 'supplier':
            suppliers = Supplier.objects.all()
            data = {
                'total_suppliers': suppliers.count(),
                'active_suppliers': suppliers.filter(is_active=True).count(),
                'total_orders': sum(s.get_total_orders() for s in suppliers),
                'total_spent': sum(s.get_total_spent() for s in suppliers),
            }
            
        return data
